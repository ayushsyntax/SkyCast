# -*- coding: utf-8 -*-
"""projectRain

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hUdV2xjN2w4JndiMrx8FuSWbXhsrVjxC

##Understand the Problem and the Data

####*GOAL*: goal is to predict rainfall for each day of the year.
"""

import pandas as pd

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

print('Train shape:', train.shape)
print('Test shape:', test.shape)
print('\nTrain columns:', train.columns.tolist())
print(train.head())
print('\nDescription:')
print(train.describe())

"""---

The dataset reflects weather conditions typical of a **tropical or subtropical coastal region**.

Temperatures are warm, averaging 24°C, with high humidity (82%) and frequent cloud cover (76%). Sunshine is limited (3.7 hours per day on average), and rainfall is light (0.75 mm/day), mostly on scattered days. Winds are moderate (22 km/h), often from the southeast.

These patterns are common in places like coastal areas of **Southeast Asia, southern China, India, or northern Australia** — where ocean influence leads to stable, humid, and partly cloudy weather year-round.

Data like this is collected by **weather stations** in urban or coastal zones, often managed by national meteorological services.

**Weather Insights**

- Warm climate: avg 24°C, range 7–36°C  
- High humidity: avg 82% (feels moist)  
- Often cloudy: 76% cover, only 3.7h sun/day  
- Light rain: 0.75 mm/day, not frequent  
- Moderate wind: 22 km/h, mostly from southeast  
- Stable pressure: avg 1013 hPa  



---

##Inspect the Data
"""

# Data types and counts
print("\n== Train Data Info ==")
print(train.info())
print("\n== Test Data Info ==")
print(test.info())

"""###Missing Values Overview"""

# Missing values: absolute and percent
train_missing = train.isnull().sum()
test_missing = test.isnull().sum()

print("\n Missing Values in Train ")
print(train_missing[train_missing > 0])

print("\n Missing Values in Test ")
print(test_missing[test_missing > 0])

print("\n Percent Missing in Train ")
print((100 * train.isnull().mean()).round(2))

print("\n Percent Missing in Test ")
print((100 * test.isnull().mean()).round(2))

"""

- **Train**: 2,190 rows, 13 columns (includes `rainfall`)  
- **Test**: 730 rows, 12 columns (no `rainfall`), 1 missing value in `winddirection`  
- All features numeric (float or int)  
- No significant missing data (except 1 in test)  
- Consistent range and structure —
- Target variable (`rainfall`)

"""

# Duplicates check
dup_train = train.duplicated().sum()
dup_test = test.duplicated().sum()

print(f"\nDuplicate rows in train: {dup_train}")
print(f"Duplicate rows in test: {dup_test}")

# Impute missing values in 'winddirection' with median
test['winddirection'].fillna(test['winddirection'].median(), inplace=True)

# Numeric summary
print("Train describe() ")
display(train.describe())
print("Test describe() ")
display(test.describe())

print("Train 'day' value counts (top 10):")
print(train["day"].value_counts().head(10))

if "rainfall" in train.columns:
    print("Rainfall unique values (train):")
    print(train["rainfall"].value_counts().head(10))

"""#####imbalanced data"""

import matplotlib.pyplot as plt

# Count the values in 'rainfall'
train['rainfall'].value_counts().plot(kind='bar', color='lightblue', edgecolor='white', alpha=0.8)

# Labels and title
plt.title("Rainfall: Imbalanced Classes")
plt.xlabel("Rainfall (0 = No, 1 = Yes)")
plt.ylabel("Count")
plt.tight_layout()
plt.show()

"""Train data covers approximately 6 years, with each day of the year repeated about 6–7 times, indicating annual cycling.  

Top day values (6, 7, 8, 9, 22, 236, 264–267) each appear 7 times — consistent with yearly repetition.  

Rainfall in train is binary:  
- 1: rain occurred (1650 days, 75.3%)  
- 0: no rain (540 days, 24.7%)  

Imbalanced but clean target — suitable for classification.  

Test set has one missing value in winddirection. All other fields are complete.  

Data is numeric, time-based, and structured.  


"""

train['rainfall'].value_counts()

"""##Exploring Data Characteristics"""

import matplotlib.pyplot as plt
import seaborn as sns

numeric_cols = train.select_dtypes(include=['float64', 'int64']).columns.drop(['id', 'day', 'rainfall'])

"""####Univariate Distribution:"""

for col in numeric_cols:
  plt.figure(figsize=(8,4))
  sns.histplot(train[col],bins=30,kde=True,color='skyblue')
  plt.title(f'Distribution & KDE of {col}')
  plt.xlabel(col)
  plt.ylabel('Frequency')
  plt.tight_layout()
  plt.show()

"""---

### **Data Insights**

The weather data reveals a **warm, humid, and consistently cloudy** climate, typical of a **tropical or subtropical region**.

- **Temperature** variables (`maxtemp`, `temperature`, `mintemp`) peak in the **high 20s to low 30s °C**, with little spread — indicating stable, year-round warmth.
- **Dew point** averages **25–27 °C**, confirming high moisture levels and muggy conditions.
- **Atmospheric pressure** centers around **1013 hPa**, showing stable weather with no extreme fluctuations.
- **Cloud cover** is high, peaking at **80–90%**, meaning skies are mostly overcast.
- **Sunshine** is limited — most days receive **0–2 hours**, consistent with frequent cloudiness.
- **Wind direction** shows two main flows: from the **southeast (~50°)** and **west (~270°)**, suggesting seasonal or sea-influenced patterns.
- **Wind speed** averages **10–20 km/h** — moderate and steady, with no strong gusts.

All distributions are **unimodal and smooth**, with no outliers. The data is clean, realistic, and well-suited for modeling.

---

### **Quick Q&A**

**Q: What type of climate is this?**  
A: Tropical or subtropical — warm, humid, and often cloudy.

**Q: Are temperatures consistent?**  
A: Yes. Daily highs, averages, and lows stay within a narrow, warm range.

**Q: How humid is it?**  
A: Very. High dew points mean the air feels moist and sticky.

**Q: Is it sunny?**  
A: No. Most days are overcast, with little direct sunlight.

**Q: Where does the wind come from?**  
A: Mainly the southeast and west — likely sea breezes or seasonal winds.

**Q: Any data issues?**  
A: None. The data is clean, complete, and physically realistic.

---

####Summary statistics in tabular form
"""

print("\nSummary statistics for features:")
print(train[numeric_cols].describe().T)

"""###Correlation Matrix & Heatmap"""

df_corr = train.select_dtypes(include=['number'])
corr_matrix = df_corr.corr()

# Plot correlation heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix, annot=True, cmap="YlGnBu", fmt=".2f", center=0)
plt.title("Correlation Heatmap of Numeric Weather Features")
plt.show()

"""**Insights**
1. **Temperature Variables**:
   - `maxtemp`, `temperature`, and `mintemp` are **strongly correlated** (close to 1.0), indicating they measure similar aspects of temperature.

2. **Humidity & Dew Point**:
   - `dewpoint` is highly correlated with `humidity` (**~0.94**) — both reflect moisture levels.
   - `dewpoint` also correlates strongly with temperatures (`maxtemp`, `temperature`, `mintemp`).

3. **Pressure**:
   - `pressure` has **negative correlations** with temperature variables (`maxtemp`, `temperature`, `mintemp`) — higher pressure tends to correlate with lower temperatures.

4. **Cloud Cover**:
   - `cloud` is negatively correlated with `sunshine` (**-0.81**) — more clouds mean less sunshine.
   - `cloud` shows moderate positive correlations with `humidity` and `dewpoint`.

5. **Wind Direction & Speed**:
   - `winddirection` and `windspeed` are **negatively correlated** (**-0.64**) — stronger winds tend to come from specific directions.
   - `winddirection` has weak correlations with other features, while `windspeed` shows slight negative correlations with temperature and humidity.

6. **Rainfall**:
   - `rainfall` is positively correlated with `humidity` (**0.64**) and `cloud` (**0.64**) — high humidity and cloud cover often precede rain.
   - `rainfall` shows weak correlations with other features.

---

### **Q&A**

**Q: What does the strong correlation between `maxtemp`, `temperature`, and `mintemp` indicate?**  
A: These variables measure different aspects of temperature but are closely related, as expected in weather data.

**Q: Why is `pressure` negatively correlated with temperature variables?**  
A: Higher atmospheric pressure typically corresponds to cooler conditions, reflecting common weather patterns.

**Q: How do `cloud` and `sunshine` relate?**  
A: They are negatively correlated (**-0.81**) — more clouds reduce sunlight exposure.

**Q: What does the correlation between `dewpoint` and `humidity` tell us?**  
A: Both measure moisture content in the air, so their strong correlation (**~0.94**) is expected.

**Q: Why is `rainfall` positively correlated with `humidity` and `cloud`?**  
A: High humidity and cloud cover often lead to rainfall, indicating a natural weather progression.

**Q: Are there any surprising correlations?**  
A: The strong negative correlation between `winddirection` and `windspeed` (**-0.64**) might be unexpected but reflects how wind direction and speed vary independently.

---

##Time Series Visualization

####Line Plot for Weather Feature Over Time
"""

plt.figure(figsize=(15,6))
sns.lineplot(data=train, x='day', y='temparature', label='Mean Temp')
sns.lineplot(data=train, x='day', y='maxtemp', label='Max Temp')
sns.lineplot(data=train, x='day', y='mintemp', label='Min Temp')
plt.title('Daily Temperature Trends Over the Year')
plt.xlabel('Day of Year')
plt.ylabel('Temperature')
plt.legend()
plt.show()

"""####Rainfall over Time"""

plt.figure(figsize=(15,4))
sns.lineplot(data=train, x='day', y='rainfall')
plt.title("Rainfall Amount Over Time (by Day of Year)")
plt.xlabel('Day of Year')
plt.ylabel('Rainfall (mm)')
plt.show()

"""- **Temperature**:  
  - Rises to peak (~32°C) at day 200, then falls.  
  - Min, mean, max all follow seasonal trend.  
  - Warm year-round, tropical/subtropical pattern.

- **Rainfall**:  
  - Irregular spikes.  
  - Lower around days 150–200.  
  - No clear link to temperature.

---

### **Q&A**

**Q: What’s the temperature trend?**  
A: Peaks mid-year (day 200), cooler at year ends.

**Q: Is it rainy when hot?**  
A: No. Rainfall is erratic — not aligned with heat.

**Q: Any seasonality?**  
A: Yes. Warm mid-year, less rain in summer.

**Q: Climate type?**  
A: Tropical — warm, seasonal temps, scattered rain.

##Outliers
"""

for col in numeric_cols:
    plt.figure(figsize=(6, 3))
    sns.boxplot(x=train[col], color='lightcoral')
    plt.title(f'Boxplot & Outlier Check: {col}')
    plt.tight_layout()
    plt.show()

"""### Key Insights

- **`pressure`**: 999–1034 hPa, median ~1015 hPa — stable, near standard sea level. A few high values, but within normal range.  
- **Temperatures** (`maxtemp`, `temperature`, `mintemp`):  
  - Range: 7–36°C  
  - Medians: 25–30°C → consistently warm  
  - No extreme outliers — data is smooth and realistic  
- **`dewpoint`**: 0–28°C, median ~25°C → high moisture in air  
  - Low values (~0°C) are rare, likely dry/cold nights  
- **`cloud`**: 0–100%, median ~85% → mostly overcast  
  - Low cloud days (~0–20%) are outliers — possibly dry season  
- **`sunshine`**: 0–12h, median 2–3h → limited sun, matches high cloud cover  
- **`winddirection`**: 0°–360°, median ~180° (south)  
  - Peaks at SE and W — likely sea/land breeze or seasonal winds  
- **`windspeed`**: 4–60 km/h, median ~20 km/h  
  - Few gusts up to 50–60 km/h — possible storms, but not frequent  

---

### Q&A

**Q: Any data problems?**  
A: No. All values are physically possible. Outliers are natural weather variations.

**Q: Is the dataset clean?**  
A: Yes. No missing or impossible values. Ready for modeling.

**Q: What climate is this?**  
A: Tropical or subtropical — warm, humid, often cloudy, with moderate winds.

**Q: Should we remove outliers?**  
A: No. They reflect real weather events. Keep them for realistic modeling.


---


"""



"""#Communicating EDA Findings & Insights

---

### **Exploratory Data Analysis (EDA) Summary**

#### **1. Overview**
The dataset contains daily weather observations over approximately six years (2,190 days in train, 730 in test). All features are numeric and physically meaningful, with only one missing value in the test set (`winddirection`), which was safely imputed using the median.

Data is clean, complete, and consistent — ideal for modeling.

---

#### **2. Target Variable: Rainfall**
- Rainfall is **binary**: 0 (no rain), 1 (rain).
- **Highly imbalanced**: ~75% of days have rain, 25% are dry.
- This is not a regression problem — it's a **classification task** with class imbalance.
- Imbalance must be addressed via:
  - Class weighting
  - Stratified validation
  - Metrics like F1, precision, recall (not accuracy)

---

#### **3. Key Weather Patterns**
- **Climate**: Warm, humid, tropical/subtropical.
  - Avg temp: ~24°C  
  - Humidity: ~82%  
  - Dew point: ~25°C → muggy conditions
- **Clouds & Sunshine**:
  - High cloud cover (median ~85%)  
  - Low sunshine (median ~2–3 hours/day)  
  - Strong negative correlation (−0.81) between cloud and sunshine
- **Wind**:
  - Avg speed: ~20 km/h (moderate)
  - Direction varies; slight peaks from SE and W
  - No dominant pattern, but wind direction and speed show moderate negative correlation (−0.64)

---

#### **4. Temporal Trends**
- **Temperature**:
  - Strong seasonal pattern: rises to peak (~32°C) around day 200, then declines.
  - Warm year-round, typical of tropical climates.
- **Rainfall**:
  - Erratic and frequent — no clear link to temperature.
  - Slight dip in rain around days 150–200 (drier period), then increases.
  - Not driven by heat — rain occurs across all temperature ranges.

---

#### **5. Feature Relationships**
- **Strong positive correlations**:
  - `humidity` ↔ `dewpoint` (~0.94)
  - `cloud` ↔ `humidity`, `dewpoint`
  - `rainfall` ↔ `humidity`, `cloud` (expected: rain on cloudy, humid days)
- **Strong negative correlations**:
  - `sunshine` ↔ `cloud` (−0.81)
  - `pressure` ↔ temperature variables (higher pressure → cooler temps)
- Temperature variables (`maxtemp`, `temperature`, `mintemp`) are highly correlated — expected.

---

#### **6. Outliers & Data Quality**
- Minor outliers in:
  - `windspeed` (up to ~60 km/h) — plausible (windy days)
  - `dewpoint` (~0°C) — rare dry/cold nights
  - `pressure` (~1034 hPa) — high but realistic
- All values are physically possible.
- No duplicates, no impossible values (e.g., humidity >100%).
- Data is **clean and ready for modeling**.

---

#### **7. Feature Engineering Opportunities**
- **Cyclical time**: Encode `day` as sine/cosine or extract month/season.
Why?
sine/cosine helps the model automatically detect these repeating patterns.
breaks the cyclical nature of time


- **Wind direction**: Already binned — useful for interpretation.
- **Lagged features**: Possible future enhancement (e.g., “yesterday’s humidity”).

---

### **Final Summary**

This dataset captures a **warm, humid, tropical climate** with:
- **Clear seasonal temperature patterns** (peak mid-year)
- **Frequent cloud cover and low sunshine**
- **Erratic rainfall**, not tied to temperature
- **Imbalanced binary target** — ideal for classification

The data is **clean, reliable, and well-structured**. With proper handling of imbalance and thoughtful feature use (humidity, cloud, dewpoint), a robust model can be built to predict rainfall.

##Feature Engineering

####cylical day
"""

import numpy as np
# Day of year: values are 1 to 365/366 (assuming continuous, not date objects)
max_day = train['day'].max()  # Typically 365 or 366
train['day_sin'] = np.sin(2 * np.pi * train['day'] / max_day)
train['day_cos'] = np.cos(2 * np.pi * train['day'] / max_day)
test['day_sin'] = np.sin(2 * np.pi * test['day'] / max_day)
test['day_cos'] = np.cos(2 * np.pi * test['day'] / max_day)

# Optionally, extract 'month' and use one-hot encoding or treat as categorical
train['month'] = ((train['day'] - 1) // 30 + 1).clip(upper=12)
test['month'] = ((test['day'] - 1) // 30 + 1).clip(upper=12)

train.sample(6)

"""####remove collinearity"""

train['temp_range'] = train['maxtemp'] - train['mintemp']
test['temp_range'] = test['maxtemp'] - test['mintemp']

"""####feature variables"""

train['humid_cloud'] = train['humidity'] * train['cloud']
test['humid_cloud'] = test['humidity'] * test['cloud']

"""####Imputation & Scaling"""

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

X_train = train.drop(columns=['id', 'rainfall'])
y_train = train['rainfall']
X_test = test.drop(columns=['id'])

numericals = X_train.select_dtypes(include=['float64', 'int64']).columns

preprocessor = ColumnTransformer([
    ("impute_scale", Pipeline([
        ("imputer", SimpleImputer(strategy="median")),
        ("scaler", StandardScaler())
    ]), slice(None))
], remainder='passthrough')

full_pipeline = Pipeline([('preprocessor',preprocessor)])

X_train = full_pipeline.fit_transform(X_train)
X_test = full_pipeline.transform(X_test)



"""#Modeling

###Base Model-Logistic Regression
"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score, StratifiedKFold
from sklearn.metrics import roc_auc_score

lr =  LogisticRegression(max_iter=1000,random_state=42)
cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

lr_scores = cross_val_score(lr, X_train, y_train, cv=cv, scoring='roc_auc')
print(f"Logistic Regression CV AUC: {lr_scores.mean():.4f} ± {lr_scores.std():.4f}")

"""##XGBoost + Optuna Tuning"""

!pip install optuna

import xgboost as xgb
import optuna
from sklearn.model_selection import cross_val_score

def objective(trial):
    params = {
        'objective': 'binary:logistic',
        'eval_metric': 'auc',
        'booster': 'gbtree',
        'lambda': trial.suggest_float('lambda', 1e-8, 10.0, log=True),
        'alpha': trial.suggest_float('alpha', 1e-8, 10.0, log=True),
        'max_depth': trial.suggest_int('max_depth', 3, 10),
        'subsample': trial.suggest_float('subsample', 0.5, 1.0),
        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.5, 1.0),
        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),
        'n_estimators': trial.suggest_int('n_estimators', 50, 300),
        'min_child_weight': trial.suggest_int('min_child_weight', 1, 10),
        'random_state': 42,
        'use_label_encoder': False,
        'tree_method': 'gpu_hist'
    }

    model = xgb.XGBClassifier(**params)
    cv_scores = cross_val_score(model, X_train, y_train, cv=cv, scoring='roc_auc')
    return cv_scores.mean()

# Run Optuna optimization
study = optuna.create_study(direction='maximize')
study.optimize(objective, n_trials=50, show_progress_bar=True)

print("Best AUC:", study.best_value)
print("Best params:", study.best_params)

best_params = study.best_params
best_model = xgb.XGBClassifier(**best_params, use_label_encoder=False, random_state=42)

cv_results = cross_val_score(best_model, X_train, y_train, cv=cv, scoring='roc_auc')
print(f"XGBoost Final CV AUC: {cv_results.mean():.4f} ± {cv_results.std():.4f}")

best_model.fit(X_train, y_train)
y_pred_proba = best_model.predict_proba(X_test)[:, 1]

"""##Saving Model"""

final_model = Pipeline([("preprocessing", full_pipeline),
                        ("model", best_model)])

import joblib
joblib.dump(final_model, 'final_model.pkl')

#Looking at individual predictions

def predict_input(model, single_input_dict):
    """
    Predicts rainfall probability for a single input using the trained model.

    Args:
        model: The trained scikit-learn pipeline model.
        single_input_dict: A dictionary representing a single input data point.

    Returns:
        The predicted probability of rainfall (a float between 0 and 1).
    """
    # Convert the single input dictionary to a pandas DataFrame
    single_input_df = pd.DataFrame([single_input_dict])

    # Predict the probability of rainfall (class 1) using the entire pipeline
    predicted_proba = model.predict_proba(single_input_df)[:, 1]

    return predicted_proba[0]

# give test query

# Example usage of the predict_input function
sample_input = {
    'day': 180,
    'pressure': 1015.0,
    'maxtemp': 30.0,
    'temparature': 25.0,
    'mintemp': 20.0,
    'dewpoint': 23.0,
    'humidity': 85.0,
    'cloud': 70.0,
    'sunshine': 5.0,
    'winddirection': 120.0,
    'windspeed': 15.0,
    'temp_range': 10.0,
    'humid_cloud': 5950.0,
    'day_sin': np.sin(2 * np.pi * 180 / 365),
    'day_cos': np.cos(2 * np.pi * 180 / 365),
    'month': 6
}

predicted_rainfall_proba = predict_input(final_model, sample_input)
print(f"Predicted probability of rainfall: {predicted_rainfall_proba:.4f}")



